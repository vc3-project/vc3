#!/bin/bash
#
# This script probes a system for properties useful for OSG-XD,
# OSG-Direct and OSG-Connect users. To be able to support both
# integration with GlideinWMS and HTCondor startd cron, argv1 is used
# to determine what mode we are in. If argv1 points to a glidein_config
# file, GlideinWMS mode is assumed. If argv1 is "NONE", HTCondor startd
# cron mode is assumed.
#
# More information:
#    http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.prd/factory/custom_scripts.html
#    http://research.cs.wisc.edu/htcondor/manual/v8.2/4_4Hooks.html
#
# Example HTCondor startd cron entry:
#
# STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) osgvo
# STARTD_CRON_osgvo_EXECUTABLE = /opt/osgvo/osgvo-node-advertise
# STARTD_CRON_osgvo_PERIOD = 30m
# STARTD_CRON_osgvo_MODE = periodic
# STARTD_CRON_osgvo_RECONFIG = true
# STARTD_CRON_osgvo_KILL = true
# STARTD_CRON_osgvo_ARGS = NONE

glidein_config="$1"

function info {
    echo "INFO  " $@ 1>&2
}

function warn {
    echo "WARN  " $@ 1>&2
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        add_config_line $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "+"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then
    info "This is a setup script for the OSG-FLOCK frontend."
    info "In case of problems, contact Mats Rynge (rynge@isi.edu)"
    info "Running in directory $PWD"
else
    info "Now running inside a singularity container"
fi

if [ "x$glidein_config" = "x" ]; then
    glidein_config="NONE"
    info "No arguments provided - assuming HTCondor startd cron mode"
else
    info "Arguments to the script: $@"
fi

if [ "$glidein_config" != "NONE" ]; then
    ###########################################################
    # import advertise and add_condor_vars_line functions
    if [ "x$add_config_line_source" = "x" ]; then
        export add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
        export condor_vars_file=`grep -i "^CONDOR_VARS_FILE " $glidein_config | awk '{print $2}'`
    fi

    source $add_config_line_source
fi

###########################################################
# We have two env variables which can be added to in this
# script to provide an expression for the START expression
# and a general warnings string which gets published in the
# ad. These are env variables until the end.
export GLIDEIN_VALIDATION_EXPR="True"
export GLIDEIN_VALIDATION_WARNINGS=""

###########################################################
# attributes below this line

##################
# cvmfs filesystem availability this has to come before singularity checks

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then
    info "Checking for CVMFS availability and attributes..."
    for FS in \
       ams.cern.ch \
       atlas.cern.ch \
       cms.cern.ch \
       icecube.opensciencegrid.org \
       oasis.opensciencegrid.org \
       singularity.opensciencegrid.org \
       stash.osgstorage.org \
       xenon.opensciencegrid.org \
    ; do
        FS_CONV=`echo "$FS" | sed 's/\./_/g'`
        FS_ATTR="HAS_CVMFS_$FS_CONV"
        RESULT="False"
        if [ -e /cvmfs/$FS/. ]; then
            RESULT="True"
            # add the revision
            REV_ATTR="CVMFS_${FS_CONV}_REVISION"
            REV_VAL=`/usr/bin/attr -q -g revision /cvmfs/$FS/. 2>/dev/null`
            if [ "x$FS" = "xstash.osgstorage.org" ]; then
                # stash.osgstorage.org needs extra checks
                if cat /cvmfs/stash.osgstorage.org/user/bbockelm/public/testfile >/dev/null 2>&1; then
                    advertise $FS_ATTR "$RESULT" "C"
                    # make sure it is an integer
                    if [ "$REV_VAL" -eq "$REV_VAL" ] 2>/dev/null; then
                        advertise $REV_ATTR "$REV_VAL" "I"
                    fi
                else
                    RESULT="False"
                fi
            elif [ "x$REV_VAL" != "x" ]; then
                # make sure it is an integer
                if [ "$REV_VAL" -eq "$REV_VAL" ] 2>/dev/null; then
                    advertise $FS_ATTR "$RESULT" "C"
                    advertise $REV_ATTR "$REV_VAL" "I"
                fi
            else
                # unable to determine revision - this is common on sites which re-export CVMFS
                # via for example NFS locally. Advertise availability.
                advertise $FS_ATTR "$RESULT" "C"
            fi
        fi
    done

    # if it looks like we have CVMFS, make sure the START expression knows that
    if [ -e /cvmfs ]; then
        export GLIDEIN_VALIDATION_EXPR="HAS_CVMFS_oasis_opensciencegrid_org && HAS_CVMFS_singularity_opensciencegrid_org && HAS_CVMFS_stash_osgstorage_org"
    fi

    # update timestamp?
    TS_ATTR="CVMFS_oasis_opensciencegrid_org_TIMESTAMP"
    TS_VAL=`(cat /cvmfs/oasis.opensciencegrid.org/osg/update.details  | egrep '^Update unix time:' | sed 's/.*: //') 2>/dev/null`
    if [ "x$TS_VAL" != "x" ]; then
        # make sure it is an integer
        if [ "$TS_VAL" -eq "$TS_VAL" ] 2>/dev/null; then
            advertise $TS_ATTR "$TS_VAL" "I"
        fi
    fi

fi # OSG_SINGULARITY_REEXEC

##################
# singularity
# advertise availability and version

if [ "x$OSG_SINGULARITY_REEXEC" = "x" ]; then
    info "Checking for singularity..."

    # some known singularity locations
    for LOCATION in \
        /util/opt/singularity/2.2.1/gcc/4.4/bin \
        /util/opt/singularity/2.2/gcc/4.4/bin \
        /uufs/chpc.utah.edu/sys/installdir/singularity/std/bin \
    ; do
        if [ -e "$LOCATION" ]; then
            info " ... prepending $LOCATION to PATH"
            export PATH="$LOCATION:$PATH"
            break
        fi
    done

    HAS_SINGULARITY="False"
    export OSG_SINGULARITY_VERSION=`singularity --version 2>/dev/null`
    if [ "x$OSG_SINGULARITY_VERSION" != "x" ]; then
        HAS_SINGULARITY="True"
        export OSG_SINGULARITY_PATH=`which singularity`
    else
        # some sites requires us to do a module load first - not sure if we always want to do that
        export OSG_SINGULARITY_VERSION=`module load singularity >/dev/null 2>&1; singularity --version 2>/dev/null`
        if [ "x$OSG_SINGULARITY_VERSION" != "x" ]; then
            HAS_SINGULARITY="True"
            export OSG_SINGULARITY_PATH=`module load singularity >/dev/null 2>&1; which singularity`
        else
            info "Unable to find singularity in PATH=$PATH"
        fi
    fi
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        info "Singularity binary appears present and claims to be version $OSG_SINGULARITY_VERSION"
    fi

    # default image for this glidein
    export OSG_SINGULARITY_IMAGE_DEFAULT="/cvmfs/singularity.opensciencegrid.org/rynge/osgvo:el6"

    # for now, we will only advertise singularity on nodes which can access cvmfs
    if [ ! -e "$OSG_SINGULARITY_IMAGE_DEFAULT" ]; then
        info "Default singularity image, $OSG_SINGULARITY_IMAGE_DEFAULT, does not appear to exist"
        HAS_SINGULARITY="False"
    fi

    # Let's do a simple singularity test by echoing something inside, and then
    # grepping for it outside. This takes care of some errors which happen "late"
    # in the execing, like:
    # ERROR  : Could not identify basedir for home directory path: /
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        info "$OSG_SINGULARITY_PATH exec --home $PWD:/srv --bind /cvmfs --pwd /srv --scratch /var/tmp --scratch /tmp --containall $OSG_SINGULARITY_IMAGE_DEFAULT echo Hello World | grep Hello World"
        if ! ($OSG_SINGULARITY_PATH exec --home $PWD:/srv \
                                         --bind /cvmfs \
                                         --pwd /srv \
                                         --scratch /var/tmp \
                                         --scratch /tmp \
                                         --containall \
                                         "$OSG_SINGULARITY_IMAGE_DEFAULT" \
                                         echo "Hello World" \
                                         | grep "Hello World") 1>&2 \
        ; then
            # singularity simple exec failed - we are done
            info "Simple singularity exec inside $OSG_SINGULARITY_IMAGE_DEFAULT failed."
            HAS_SINGULARITY="False"
        fi
    fi

    # If we still think we have singularity, we should re-exec this script within the default
    # container so that we can advertise that environment
    if [ "x$HAS_SINGULARITY" = "xTrue" ]; then
        # We want to map the full glidein dir to /srv inside the container. This is so 
        # that we can rewrite env vars pointing to somewhere inside that dir (for
        # example, X509_USER_PROXY)
        export SING_OUTSIDE_BASE_DIR=`echo "$PWD" | sed -E "s;(.*/glide_[a-zA-Z0-9]+).*;\1;"`

        # build a new command line, with updated paths
        CMD=""
        for VAR in $0 "$@"; do
            VAR=`echo " $VAR" | sed -E "s;.*/glide_[a-zA-Z0-9]+(.*);/srv\1;"`
            CMD="$CMD $VAR"
        done

        # let "inside" script know we are re-execing
        export OSG_SINGULARITY_REEXEC=1
        info "$OSG_SINGULARITY_PATH exec --home $SING_OUTSIDE_BASE_DIR:/srv --bind /cvmfs --pwd /srv --scratch /var/tmp --scratch /tmp --containall $OSG_SINGULARITY_IMAGE_DEFAULT $CMD"
        if $OSG_SINGULARITY_PATH exec --home $SING_OUTSIDE_BASE_DIR:/srv \
                                      --bind /cvmfs \
                                      --pwd /srv \
                                      --scratch /var/tmp \
                                      --scratch /tmp \
                                      --containall \
                                      "$OSG_SINGULARITY_IMAGE_DEFAULT" \
                                      $CMD \
        ; then
            # singularity worked - exit here as the rest script ran inside the container
            exit $?
        fi
    fi
    
    # if we get here, singularity is not available or not working
    advertise HAS_SINGULARITY "False" "C"

else

    # delay the advertisement until here to make sure singularity actually works
    advertise HAS_SINGULARITY "True" "C"
    advertise OSG_SINGULARITY_VERSION "$OSG_SINGULARITY_VERSION" "S"
    advertise OSG_SINGULARITY_PATH "$OSG_SINGULARITY_PATH" "S"
    advertise OSG_SINGULARITY_IMAGE_DEFAULT "$OSG_SINGULARITY_IMAGE_DEFAULT" "S"
   
    # fix up the env
    for key in X509_USER_PROXY X509_USER_CERT _CONDOR_MACHINE_AD _CONDOR_JOB_AD \
               _CONDOR_SCRATCH_DIR _CONDOR_CHIRP_CONFIG _CONDOR_JOB_IWD \
               add_config_line_source condor_vars_file ; do
        eval val="\$$key"
        val=`echo "$val" | sed -E "s;$SING_OUTSIDE_BASE_DIR(.*);/srv\1;"`
        eval $key=$val
    done
        
    export add_config_line_source=`echo "$add_config_line_source" | sed -E "s;.*/glide_[a-zA-Z0-9]+(.*);/srv\1;"`
    export condor_vars_file=`echo "$condor_vars_file" | sed -E "s;.*/glide_[a-zA-Z0-9]+(.*);/srv\1;"`
    info "Updated glidein config to paths inside the container: add_config_line_source=$add_config_line_source condor_vars_file=$condor_vars_file"

fi

# operating system

# /etc/issue works most of the time, but there are exceptions
OS_NAME=`cat /etc/issue | head -n1 | awk '{print $1;}' | tr '[:lower:]' '[:upper:]'`

if [ "X$OS_NAME" = "xUBUNTU" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $2;}'`
elif [ -e /etc/debian_version ]; then
    OS_NAME="DEBIAN"
    OS_VERSION=`cat /etc/debian_version`
elif [ "X$OS_NAME" = "xFEDORA" ]; then
    OS_VERSION=`cat /etc/issue | head -n1 | awk '{print $3;}'`
elif [ -e /etc/redhat-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/redhat-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/rocks-release ]; then
    OS_NAME="RHEL"
    OS_VERSION=`cat /etc/rocks-release | grep -o -E ' [0-9]+.[0-9]+'`
elif [ -e /etc/SuSE-release ]; then
    OS_NAME="SUSE"
    OS_VERSION=`cat /etc/SuSE-release | grep VERSION | grep -o -E ' [0-9]+'`
fi

# remove spaces/tabs in the version
OS_VERSION=`echo $OS_VERSION | sed 's/[ \t]//g'`

# remove / in the version
OS_VERSION=`echo $OS_VERSION | sed 's/\//_/g'`

# we only want major version numbers
OS_VERSION=`echo $OS_VERSION | sed 's/[\.-].*//'`

if [ "x$OS_NAME" = "x" ]; then
    OS_NAME="Unknown"
fi
if [ "x$OS_VERSION" = "x" ]; then
    OS_VERSION="Unknown"
fi

# kernel
OS_KERNEL=`uname -r`
if [ "x$OS_KERNEL" = "x" ]; then
    OS_KERNEL="Unknown"
fi

advertise OSGVO_OS_NAME "$OS_NAME" "S"
advertise OSGVO_OS_VERSION "$OS_VERSION" "S"
advertise OSGVO_OS_STRING "$OS_NAME $OS_VERSION" "S"
advertise OSGVO_OS_KERNEL "$OS_KERNEL" "S"

# cpu info
CPU_MODEL=`cat /proc/cpuinfo | grep -i "^model name" | head -n 1 | sed -r 's/[a-zA-Z \t]+:[ ]*//'`
advertise OSGVO_CPU_MODEL "$CPU_MODEL" "S"


###########################################################
# gpus - only for the GPU group

group="gpu"
if [ "$glidein_config" != "NONE" ]; then
    group=`grep '^GLIDECLIENT_Group ' $glidein_config | awk '{print $2}'`
fi
if [ "x$group" = "xgpu" ]; then
    wget -nv -O condor_gpu_discovery http://osg-flock.grid.iu.edu/gwms-extras/condor_gpu_discovery
    chmod 755 condor_gpu_discovery
    ./condor_gpu_discovery -properties -extra | grep -v DetectedGPUs >gpu.ad
    while read line; do
        key=`echo "$line" | sed 's/=.*//'`
        value=`echo "$line" | sed 's/.*=//'`
        if (echo "$value" | grep '"') >/dev/null 2>&1; then
            value=`echo "$value" | sed 's/"//g'`
            advertise "$key" "$value" "S"
        else
            advertise "$key" "$value" "C"
        fi
    done <gpu.ad

    # and some extra nvida attributes
    nvidia_version=`(nvidia-smi | grep "Driver Version" | sed 's/.*: *//' | awk '{print $1;}') 2>/dev/null`
    if [ "x$nvidia_version" != "x" ]; then
        advertise NV_DRIVER "$nvidia_version" "C"
    fi
fi


##################
# stash
if (cat /stash/user/test.osgconnect.1M) >/dev/null 2>&1; then
    # ok, we can access stash, but is it ro or rw?
    if (mount | grep " /stash" | grep ro) >/dev/null 2>&1; then
        advertise StashReadOnly "True" "C"
    else
        advertise StashReadWrite "True" "C"
    fi
fi


##################
# squid

HAS_SQUID="False"
export OSG_SQUID_LOCATION=${OSG_SQUID_LOCATION:-UNAVAILABLE}
if [ "$OSG_SQUID_LOCATION" != UNAVAILABLE ]; then
    HAS_SQUID="True"
fi
advertise HAS_SQUID "$HAS_SQUID" "C"


##################
# cms software

info "Checking for CMS software..."
OSGVO_CMSSW_Path=""
if [ -r "$OSG_APP/cmssoft/cms/cmsset_default.sh" ]
then
    OSGVO_CMSSW_Path="$OSG_APP/cmssoft/cms/"
elif [ -r $VO_CMS_SW_DIR/cmsset_default.sh ]
then
    OSGVO_CMSSW_Path="$VO_CMS_SW_DIR/"
fi
if [ "x$OSGVO_CMSSW_Path" != "x" ]
then
    advertise OSGVO_CMSSW_Path "$OSGVO_CMSSW_Path" "S"
fi

OSGVO_CMSSW_Revision=""
if [ "x$OSGVO_CMSSW_Path" != "x" -a -r "$OSGVO_CMSSW_Path/etc/cms-common/revision" ]
then
    OSGVO_CMSSW_Revision=$(head -c 10 "$OSGVO_CMSSW_Path/etc/cms-common/revision")
fi
if [ "x$OSGVO_CMSSW_Revision" != "x" ]
then
    advertise OSGVO_CMSSW_Revision "$OSGVO_CMSSW_Revision - $OSGVO_CMSSW_Path/etc/cms-common/revision" "S"
fi


##################
# tcsh test

info "Attempting to determine if tcsh is available and works..."
cat >csh.test <<EOF
#!/bin/tcsh -f
/bin/true
EOF
chmod 755 csh.test
HAS_TCSH="False"
if [ -e /bin/tcsh ]; then
    if ./csh.test >/dev/null 2>&1; then
        HAS_TCSH="True"
    fi
fi
advertise HAS_TCSH "$HAS_TCSH" "C"
rm -f csh.test



# modules
RESULT="False"
# extra check to make sure we can read a file
if cat /cvmfs/oasis.opensciencegrid.org/osg/README.txt >/dev/null 2>&1; then
    if [ -e /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh ]; then
        if (. /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail) >/dev/null 2>&1; then
            # also make sure module avail is not throwing a stack trace
            if ! (. /cvmfs/oasis.opensciencegrid.org/osg/sw/module-init.sh && module avail 2>&1 | grep traceback) >/dev/null 2>&1; then
                RESULT="True"
            fi
        fi
    fi
fi
advertise HAS_MODULES "$RESULT" "C"


##################
# Java

HAS_JAVA="False"
if java -Xmx100m -version >/dev/null 2>&1; then
    HAS_JAVA="True"
fi
advertise HAS_JAVA "$HAS_JAVA" "C"


##################
# zip

HAS_ZIP="False"
if [ -e /usr/bin/zip ]; then
    HAS_ZIP="True"
fi
advertise HAS_ZIP "$HAS_ZIP" "C"


##################
# scp

HAS_SCP="False"
if [ -e /usr/bin/scp ]; then
    HAS_SCP="True"
fi
advertise HAS_SCP "$HAS_SCP" "C"


##################
# guc

GUC_PATH=`which globus-url-copy 2>/dev/null`
if [ "X$GUC_PATH" = "X" ]; then
    GUC_PATH="NA"
fi
advertise GUC_PATH "$GUC_PATH" "S"

# does it work?
if [ "X$GUC_PATH" != "X" ]; then
    GUC_VERIFIED="False"
    if globus-url-copy -notpt gsiftp://xd-login.opensciencegrid.org/etc/hosts file:///dev/null >/dev/null; then
        GUC_VERIFIED="True"
    fi
    advertise GUC_VERIFIED "$GUC_VERIFIED" "C"
fi

##################
# xrdcp

HAS_XRDCP="False"
if xrdcp --version >/dev/null 2>&1; then
    HAS_XRDCP="True"
fi
advertise HAS_XRDCP "$HAS_XRDCP" "C"


##################
# timeout

HAS_TIMEOUT="False"
if /usr/bin/timeout --version >/dev/null 2>&1; then
    HAS_TIMEOUT="True"
fi
advertise HAS_TIMEOUT "$HAS_TIMEOUT" "C"


##################
# some basic libs
for LIB in \
    /lib64/libgcc_s.so.1 \
    /lib64/libglib-2.0.so.0 \
    /usr/lib64/libgfortran.so.3 \
    /usr/lib64/libglib-2.0.so \
    /usr/lib64/libgslcblas.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libstdc++.so.6 \
    /usr/lib64/libgtk-x11-2.0.so.0 \
    /usr/lib64/libXm.so.4 \
    /usr/lib64/libXt.so.6 \
    /usr/lib64/libXmu.so.6 \
    /usr/lib64/libXdmcp.so.6 \
    /usr/lib64/libgmp.so.3 \
    /usr/lib64/libgslcblas.so.0 \
    /usr/lib64/libgsl.so.0 \
    /usr/lib64/libicuuc.so.42 \
    /usr/lib64/atlas/libatlas.so.3 \
    /usr/lib64/atlas/liblapack.so.3 \
    /usr/lib64/atlas/libptf77blas.so.3 \
    /usr/lib64/libtk8.5.so \
; do
    ATTR="HAS_FILE"`echo $LIB | sed 's/[\.\/\+\-]/_/g'`
    HAS_LIB="False"
    if [ -e $LIB ]; then
        HAS_LIB="True"
    fi
    advertise $ATTR "$HAS_LIB" "C"
done

if (rpm -qa | egrep 'glib2-2\.28') >/dev/null 2>&1; then
    advertise HAS_GLIB2_228 "True" "C"
fi


##################
# R

HAS_R="False"
if R --version >/dev/null 2>&1; then
    HAS_R="True"
    R_VERSION=`(R --version 2>&1 | head -n1 | sed 's/"//g') 2>/dev/null`
    if [ "x$R_VERSION" != "x" ]; then
        advertise R_VERSION "$R_VERSION" "S"
    fi
fi
advertise HAS_R "$HAS_R" "C"


##################
# python/numpy/scipy

info "Checking for Python availability..."
if python --version >/dev/null 2>&1; then
    PYTHON_VERSION=`python --version 2>&1 | sed 's/Python //'`
    if [ "x$PYTHON_VERSION" != "x" ]; then
        advertise PYTHON_VERSION "$PYTHON_VERSION" "S"
    fi
fi

info "Checking for numpy/scipy availability..."
cat >py.check <<EOF
from numpy import array
from os.path import exists
from random import seed, shuffle
from scipy.stats import chisquare
from sys import argv
EOF

Has_Numpy_Scipy="False"
if python py.check >/dev/null 2>&1; then
    Has_Numpy_Scipy="True"
fi
advertise HAS_NUMPY "$Has_Numpy_Scipy" "C"
rm -f py.check


##################
# matlab

advertise MATLAB_COMPATIBLE "HAS_MODULES && HAS_FILE_usr_lib64_libXt_so_6" "C"


##################
# Blast

info "Checking for blast availability..."

APP_BASE=$OSG_APP/`whoami`/ncbi-blast-2.2.28+
DATA_BASE=$OSG_DATA/`whoami`/blastdb

HAS_BLAST="False"
if [ -e "$APP_BASE/bin/blastp" -a -e "$DATA_BASE/nr.00.phr" ]; then

    # let's do a specific test to make sure things work
    export BLASTDB=$OSG_DATA/`whoami`/blastdb
    export PATH=$APP_BASE/bin:$PATH
    #echo ">test query" > test.fasta
    #echo "ACGTCCGAGACGCGAGCAGCGAGCAGCAGAGCGACGAGCAGCGACGA" >> test.fasta
    #if (blastp -db nr -query test.fasta) >/dev/null; then
        HAS_BLAST="True"

        # we also want to put the dirs in the environment
        advertise BLAST_INSTALL_DIR "$APP_BASE" "S"

        advertise BLAST_DB_DIR "$DATA_BASE" "S"
    #fi
fi
advertise HAS_BLAST "$HAS_BLAST" "C"


##################
# PHSW (Matt Snowball)
#
#info "Checking for PHSW availability..."
#
#PHSW_RESULT="True"
#PHSWDIR=/cvmfs/oasis.opensciencegrid.org/osg/projects/phenix/snowball/phnxsw
#
#if [ -e /cvmfs/oasis.opensciencegrid.org/osg/projects/phenix/snowball/phnxsw/bin/set_grid_env.sh ]; then
#
#    if ! (source $PHSWDIR/bin/set_grid_env.sh && grid-proxy-init -version && voms-proxy-init -version) 1>&2 ; then
#        PHSW_RESULT="False"
#    fi
#    
#    (source $PHSWDIR/bin/set_grid_env.sh && globus-url-copy -version) 1>&2
#    RC=$?
#    if [ "x$RC" != "x0" -a "x$RC" != "x1" ]; then
#        PHSW_RESULT="False"
#    fi
#    
#    if ! (source $PHSWDIR/bin/set_grid_env.sh && root.exe -l -b -q) 1>&2 ; then
#        PHSW_RESULT="False"
#    fi
#else
#    PHSW_RESULT="False"
#fi
#
#advertise HAS_PHSW "$PHSW_RESULT" "C"

##################
# mostly done - update START validation expressions and warnings attribute
if [ -e .stop-glidein.stamp -o -e ../.stop-glidein.stamp ]; then
    advertise OSG_NODE_VALIDATED "False" "C"
    advertise OSG_NODE_WARNINGS "Node is shutting down due to stop-glidein file" "S"
else
    advertise OSG_NODE_VALIDATED "$GLIDEIN_VALIDATION_EXPR" "C"
    if [ "x$GLIDEIN_VALIDATION_WARNINGS" != "x" ]; then
        advertise OSG_NODE_WARNINGS "$GLIDEIN_VALIDATION_WARNINGS" "S"
    fi
fi


##################
info "All done - time to do some real work!"

