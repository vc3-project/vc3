#!/usr/bin/env python

from __future__ import print_function
from optparse import OptionParser, OptionGroup
import urllib
import platform
import os
import errno
import sys
import logging
import tempfile
import shutil
import tarfile
import time
import re
import signal
import subprocess
import socket
import textwrap
import multiprocessing
import uuid

__version__ = "1.1.5"

class CondorGlidein(object):
    """
    HTCondor Glidein class. 

    Default options 
    """

    def __init__(self, 
                    condor_version=None,
                    condor_urlbase=None,
                    collector=None,
                    lingertime=None,
                    loglevel=None,
                    workdir=None,
                    noclean=None,
                    exec_wrapper=None,
                    vc3_env=None,
                    startd_cron=None,
                    auth=None,
                    passwordfile=None,
                    extra_config=None,
                    ccb=None,
                    partitionable=None,
                    slots=None,
                    cores=None,
                    memory=None,
                    disk=None,
                    glidein_id=None
                ):
        self.condor_version = condor_version
        self.condor_urlbase = condor_urlbase
        self.collector = collector
        self.ccb = ccb
        self.lingertime = lingertime
        self.loglevel = loglevel
        self.iwd=workdir
        self.noclean = noclean
        self.auth=auth
        self.passwordfile=passwordfile
        self.extra_config = extra_config 
        self.partitionable = partitionable
        self.cores = cores
        self.slots = slots
        self.memory = memory
        self.disk = disk
        self.glidein_id = glidein_id

        # Other items that are set later
        #self.log
        #self.condor_platform = None # condor-version-arch_distro-stripped
        #self.condor_tarball = None # the above w/ .tar.gz added
        #self.glidein_dir = None # iwd + glidein dir name
        #self.exec_wrapper = None
        #self.startd_cron = None
        

        self.setup_signaling()
        self.setup_logging(loglevel)

        self.setup_workdir()
        self.download_tarball()
        self.unpack_tarball()
        self.report_info()

        if exec_wrapper is not None:
            self.exec_wrapper = self.copy_to_exec(exec_wrapper)

        if startd_cron is not None:
            self.startd_cron = self.copy_to_exec(startd_cron)

        if vc3_env is not None:
            self.vc3_env_wrapper = self.create_vc3_wrapper(vc3_env)
       
        if self.memory is None:
            self.calculate_memory()

        if self.glidein_id is None:
            self.glidein_id = str(uuid.uuid4())
        self.log.debug("Glidein Job ID is: %s" % self.glidein_id)


        self.initial_config()

        self.start_condor()

        if noclean is False:
            self.cleanup()


    def setup_signaling(self):
        """
        Interrupt handling to trigger the cleanup function whenever Ctrl-C
        or something like `kill` is sent to the process
        """
        signal.signal(signal.SIGINT, self.interrupt_handler)
        signal.signal(signal.SIGHUP, self.interrupt_handler)
        signal.signal(signal.SIGTERM, self.interrupt_handler)

    def setup_logging(self, loglevel):
        """
        Setup the logging handler and format
        """
        formatstr = "[%(levelname)s] %(asctime)s %(module)s.%(funcName)s(): %(message)s"
        self.log = logging.getLogger()
        hdlr = logging.StreamHandler(sys.stdout) 
        formatter = logging.Formatter(formatstr)
        hdlr.setFormatter(formatter)
        self.log.addHandler(hdlr)
        self.log.setLevel(loglevel)
        
    def setup_workdir(self):
        """ 
        Setup the working directory for the HTCondor binaries, configs, etc. 
        
        If no argument is passed, then generate a random one in the current
        working directory. Otherwise use the path specified
        """
        if self.iwd is None:
            self.iwd = os.getcwd()

        try:
            self.glidein_dir = tempfile.mkdtemp(prefix="%s/condor-glidein." % self.iwd)
            self.log.info("Glidein working directory is %s" % self.glidein_dir)
            # Create the "local" directory for anything non-vanilla
            self.glidein_local_dir = self.glidein_dir + "/local"
            os.mkdir(self.glidein_local_dir)
            # Some extra directories that need to be created
            os.mkdir(self.glidein_local_dir + "/etc")
            os.mkdir(self.glidein_local_dir + "/log")
            os.mkdir(self.glidein_local_dir + "/lock")
            os.mkdir(self.glidein_local_dir + "/execute")
            self.log.debug("Glidein local directory is %s" % self.glidein_local_dir)
        except Exception as e:
            self.log.debug(e)
            self.log.error("Failed to create working directory")
            self.cleanup()

    def download_tarball(self):
        """
        Determine the worker's architecture and distribution, download the 
        appropriate release of HTCondor. 
        """
    
        if platform.machine() == 'x86_64':
            arch = platform.machine()
        else:
            self.log.error("Only x86_64 architecture is supported")
            raise Exception

        condor_version = self.condor_version

        distro_name = platform.linux_distribution()[0]
        distro_major = platform.linux_distribution()[1].split(".",1)[0]
         
        if platform.system() == 'Linux':
            if any(map( lambda(pat): re.search(pat, distro_name, re.I), ["red ?hat", "scientific", "centos"])):
                distro = "RedHat" + distro_major
            elif distro_name in ["Debian"]:
                distro = "Debian" + distro_major
            elif distro_name in ["Ubuntu"]:
                distro = "Ubuntu" + distro_major
            elif re.search("SUSE", distro_name, re.I):
                distro = "SUSE" + distro_major
            else:
                raise Exception("Unable to determine distro")
        elif platform.system() == 'Darwin':
                distro = 'MacOSX' # why not?

        self.condor_platform = "condor-%s-%s_%s-stripped" % (condor_version,
                                                        arch, distro)

        tarball_name = self.condor_platform + ".tar.gz"

        src = self.condor_urlbase + "/" + tarball_name

        self.condor_tarball = self.glidein_dir + "/" + tarball_name

        self.log.info("Downloading HTCondor tarball")
        self.log.debug("%s > %s", src, self.condor_tarball)

        try:
            urllib.urlretrieve(src, self.condor_tarball) 
        except Exception as e:
            self.log.debug(e)
            self.log.error("Failed to retrieve the tarball")
            self.cleanup()

        # temp comment out
        #cmd = "file %s" % self.condor_tarball
        #out = self.runcommand(cmd)
        #if "gzip compressed data" in out:
        #    self.log.debug("Filetype is gzip")
        #else:
        #    self.log.error("File type is incorrect. Aborting.")
        #    self.cleanup()

    def unpack_tarball(self):
        """
        Unpack the HTCondor tarball to glidein_dir and cleanup the tar file

        """
        #condor_dir SHOULD be the same as self.glidein_dir/self.condor_platform
        try:
            tar = tarfile.open(self.condor_tarball)
            tar.extractall(path=self.glidein_dir + '/')
            self.condor_dir = self.glidein_dir + '/' + tar.getnames()[0]
            self.log.debug("Unpacked tarball to %s", self.condor_dir)
            tar.close()

            os.remove(self.condor_tarball)
        except Exception as e:
            self.log.debug(e)
            self.log.error("Failed to unpack the tarball")
            self.cleanup()

    def copy_to_exec(self, path):
        """
        If we need to add some extra scripts such as periodic crons or exec 
        wrappers, we move them to the HTCondor libexec dir and make sure they
        are executable
        """
        # Make the libexec dir if its not available already
        try: 
            local_libexec = self.glidein_local_dir + "/libexec"
            os.mkdir(local_libexec)
        except OSError as e:
            if e.errno == errno.EEXIST:
                self.log.debug("Local libexec dir already exists")
                pass
            else:
                self.log.error("Couldn't create local libexec: %s", e)
                self.cleanup()
        self.log.debug("Created or found local libexec path: %s", local_libexec)
        
        try:
            f = self.realize_file(path, local_libexec) # copy file from http or 
                                                     # unix to local_libexec/
            self.log.debug("Copied %s to %s: ", path, f)
        except Exception as e:
            self.log.error("Couldn't copy to libexec: %s", e)
            self.cleanup()
    
        try:
            os.chmod(f, 0755)
            self.log.debug("Set %s as executable", f)
        except Exception as e:
            self.log.error("Couldn't set execute bits on %s: %s", f, e)

        return f

    def create_vc3_wrapper(self, vc3_env):
      self.log.debug("Creating vc3 wrapper")

      exec_wrapper = ''
      if hasattr(self, 'exec_wrapper'):
        exec_wrapper = self.exec_wrapper

      try:
        vc3_env_file = os.getenv(vc3_env)
      except Exception as e:
        self.log.error("Couldn't read environment variable %s", vc3_env)
      
      self.vc3_env_file = self.copy_to_exec(vc3_env_file)
      vc3_env_wrapper = os.path.join(os.path.dirname(self.vc3_env_file), 'vc3_env_wrapper')

      with open(vc3_env_wrapper, 'w') as f:
        f.write("#! /bin/sh\n\n")
        f.write(". %s\n\n" % vc3_env_file)
        f.write('exec %s "$@"\n\n' % exec_wrapper)

      try:
          os.chmod(vc3_env_wrapper, 0755)
          self.log.debug("Set %s as executable", vc3_env_wrapper)
      except Exception as e:
          self.log.error("Couldn't set execute bits on %s: %s", vc3_env_wrapper, e)

      return vc3_env_wrapper

        
    def cleanup(self):
        """
        Remove any files that may have been created at glidein start time

        Some operations are not atomic, e.g., deleting the tarball after
        extracting it. Make sure we clean this up!
        """ 
        try:
            self.log.info("Sending SIGTERM to condor_master")
            os.kill(self.masterpid, signal.SIGTERM)
        except Exception as e: 
            self.log.debug(e)

        if self.noclean is True:
            self.log.info("'No Clean' is true -- exiting without cleaning up files!")
            sys.exit(1)

        self.log.info("Removing working directory and leftover files")
        try:
            os.remove(self.condor_tarball)
        except OSError as e:
            if e.errno == errno.ENOENT:
                self.log.debug("Tarball already cleaned up.")
            else:
                self.log.warn("Tarball exists but can't be removed for some reason")
            pass

        try:
            shutil.rmtree(self.glidein_dir)
        except AttributeError:
            self.log.debug("Working directory is not yet defined -- ignoring")
            pass
        except Exception as e:
            self.log.warn("Failed to remove %s !" % self.glidein_dir)
            self.log.debug(e)
            pass
        sys.exit(1)

    def initial_config(self):
        """
        Write out a basic HTCondor config to 
            <glidein_dir>/<local.hostname>/etc/condor/glidein.conf

        This configuration can later be overwritten by a startd cron that
        checks for additional config.
        """

        
        config_dir = self.glidein_local_dir + "/etc"

        config_bits = []

        dynamic_config = """ 
            COLLECTOR_HOST          = %s
            STARTD_NOCLAIM_SHUTDOWN = %s
            START                   = %s
            RELEASE_DIR             = %s
            GLIDEIN_LOCAL_DIR       = %s 
            MEMORY                  = %s
            VC3_GLIDEIN_VERSION     = "%s"
            VC3_GLIDEIN_ID          = "%s"
        """ % (self.collector, self.lingertime, "TRUE", self.condor_dir, self.glidein_local_dir, self.memory, __version__, self.glidein_id)

        config_bits.append(textwrap.dedent(dynamic_config))

        static_config = """\
            SUSPEND                     = FALSE
            PREEMPT                     = FALSE
            KILL                        = FALSE
            RANK                        = 0
            CLAIM_WORKLIFE              = 3600
            JOB_RENICE_INCREMENT        = 0
            HIGHPORT                    = 30000
            LOWPORT                     = 20000
            DAEMON_LIST                 = MASTER, STARTD 
            ALLOW_WRITE                 = condor_pool@*, submit-side@matchsession
            SEC_DEFAULT_AUTHENTICATION  = PREFERRED
            SEC_DEFAULT_ENCRYPTION      = OPTIONAL
            SEC_DEFAULT_INTEGRITY       = REQUIRED
            ALLOW_ADMINISTRATOR         = condor_pool@*/*
            LOCAL_DIR                   = $(GLIDEIN_LOCAL_DIR)
            LOCK                        = $(GLIDEIN_LOCAL_DIR)/lock
            USE_SHARED_PORT             = TRUE
            SHARED_PORT_PORT            = 0
            COLLECTOR_PORT              = 9618 
            GLIDEIN_NAME                = glidein_$RANDOM_INTEGER(10000,99999,1)
            MASTER_NAME                 = $(GLIDEIN_NAME)
            STARTD_NAME                 = $(GLIDEIN_NAME)
            PUBLISH_OBITUARIES          = FALSE
            RUNBENCHMARKS               = FALSE
            FACTORY_JOBID               = $(VC3_GLIDEIN_ID)

            STARTD_ATTRS = $(STARTD_ATTRS) VC3_GLIDEIN_VERSION VC3_GLIDEIN_ID FACTORY_JOBID
        """

        config_bits.append(textwrap.dedent(static_config))

        if hasattr(self, 'disk'):
            if self.disk is not None:
                disk_kb = "DISK = %s\n" % (self.disk)
                config_bits.append(textwrap.dedent(disk_kb))

        if hasattr(self, 'ccb'):
            if self.ccb is not None:
                ccb_address = "CCB_ADDRESS = %s\n" % (self.ccb)
                config_bits.append(textwrap.dedent(ccb_address))

        if (self.slots, self.cores, self.partitionable) == (None, None, None):
            self.log.debug("Defaulting to single slot")
            pc = """\
                SLOT_TYPE_1 = cpus=1, memory=auto, disk=100%, swap=100%
                NUM_SLOTS_TYPE_1 = 1
            """
            config_bits.append(textwrap.dedent(pc))
        else:
            slots = self.slots if self.slots else 1
            self.log.debug("Setting number of slots to %s" % slots)

            pc = """\
                NUM_SLOTS = {0}
                NUM_SLOTS_TYPE_1 = {0}
                SLOT_TYPE_1 = cpus=1/{0}, memory=1/{0}, disk=1/{0}, swap=1/{0}
            """.format(slots)
            config_bits.append(textwrap.dedent(pc))

            if self.cores is not None:
                pc = "NUM_CPUS = %s\n" % (self.cores)
                config_bits.append(pc)

            if self.partitionable is not None:
                pc = "SLOT_TYPE_1_PARTITIONABLE = TRUE\n"
                config_bits.append(pc)

        wrapper = None
        if hasattr(self, 'vc3_env_wrapper'):
          wrapper = self.vc3_env_wrapper
        elif hasattr(self, 'exec_wrapper'):
          wrapper = self.exec_wrapper

        if wrapper:
            wrapper = "USER_JOB_WRAPPER = $(GLIDEIN_LOCAL_DIR)/libexec/%s\n" % (os.path.basename(wrapper))
            config_bits.append(wrapper)

        if hasattr(self, 'startd_cron'):
            cron = """\
                STARTD_CRON_JOBLIST          = $(STARTD_CRON_JOBLIST) startup periodic

                STARTD_CRON_startup_EXECUTABLE = $(GLIDEIN_LOCAL_DIR)/libexec/%s
                STARTD_CRON_startup_MODE     = OneShot
                STARTD_CRON_startup_RECONFIG = TRUE
                STARTD_CRON_startup_KILL     = TRUE

                STARTD_CRON_periodic_EXECUTABLE = $(GLIDEIN_LOCAL_DIR)/libexec/%s
                STARTD_CRON_periodic_PERIOD   = 5m
                STARTD_CRON_periodic_MODE     = PERIODIC
                STARTD_CRON_periodic_RECONFIG = TRUE
                STARTD_CRON_periodic_KILL     = TRUE
            """ % ( os.path.basename(self.startd_cron), os.path.basename(self.startd_cron) )
            config_bits.append(textwrap.dedent(cron))

        if "password" in self.auth and self.passwordfile is not None:
            try:
                self.log.info("Using password authentication")
                passpath = self.glidein_local_dir + "/etc"
                f = self.realize_file(self.passwordfile, passpath) # copy file from http or unix
                self.password_full_path = f
                os.chmod(self.password_full_path, 0400)
                self.log.debug("Using password file: %s", self.password_full_path)
            except Exception as e:
                self.log.error("Couldn't get pool password")
                self.log.debug(e)
                self.cleanup()
            self.log.debug("Just doublechecking the password path: %s", self.password_full_path)
            passwd_config = """
                SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD
                SEC_PASSWORD_FILE = %s
                """ % (self.password_full_path)
            config_bits.append(textwrap.dedent(passwd_config)) 

        # We want to take any VC3_ environment variables and expose them as
        # classads to the startd    
        self.log.debug("Exporting VC3 environment variables as classads...")
        keys = []
        for k,v in os.environ.items():
            if "VC3_" in k:
                self.log.debug("Adding: %s = %s", k,v)
                cfg = "%s = \"%s\" \n" % (k, v)
                config_bits.append(textwrap.dedent(cfg))
                keys += [k] 
        if keys:
            cfg= "STARTD_ATTRS = $(STARTD_ATTRS) %s" % (" ".join(keys))
            config_bits.append(textwrap.dedent(cfg))
                
        # Condor evaluates config files line-by-line, so we want to put any
        # override configuration here just before the end
        if self.extra_config is not None:
            try:
                self.log.debug("extra config is %s \n glidein_dir is %s", self.extra_config, self.glidein_dir)
                f = self.realize_file(self.extra_config, self.glidein_dir)
                self.log.debug("file is: %s", f)
                c = open(f, 'r')
                cfg = c.read()
                c.close()
            except Exception as e:
                self.log.error("Couldn't read the extra configuration. Aborting")
                self.log.debug(e)
                self.cleanup()
            config_bits.append(cfg)

        config = "".join(config_bits)
        config_path = config_dir + "/condor_config"

        self.log.debug("Configuration built:\n%s" % config)

        try:
            target = open(config_path, 'w')
            target.write(config)
            target.close()
            self.log.debug("Wrote %s" % config_path)
            os.environ["CONDOR_CONFIG"] = config_path
            self.log.info("Set CONDOR_CONFIG environment var to %s", config_path)
        except Exception as e:
            self.log.error("Unable to write config %s" % config_path)
            self.log.debug(e)
            self.cleanup()

    def start_condor(self):
        self.log.info("Starting condor_master..")
        cmd = "%s/sbin/condor_master -dyn -f -pidfile %s/master.pid -t" % (self.condor_dir, self.glidein_local_dir)
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        self.masterpid = p.pid
        self.mypid = os.getpid()
        self.log.info("I am running as pid %s. condor_master is running as pid %s" % (self.mypid, self.masterpid))
        time.sleep(300)
        (out, err) = p.communicate()
        self.log.info("condor_master has returned")    

    def report_info(self):
        self.log.info("Hostname: %s" % socket.gethostname())

    def calculate_memory(self):
        """
        This function calculates the per-CPU memory. 
        
        Returns self.memory where :
            * If --cores is set
                 memory = Total Physical Memory / # Cores
            * If either --partitionable or --slots are set, but not --cores
              all cores are used, so:
                 memory = Total Physical Memory
            * Otherwise, default to physical memory / cpu.
                 memory = Total Physical Memory / # Physical CPUs
        """

        num_cpus = multiprocessing.cpu_count()
        
        if platform.system() == 'Darwin':
            cmd = 'sysctl hw.memsize'
            mem_bytes = int(self.runcommand(cmd).split(" ")[1])
        else:
            mem_bytes = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')

        # HTCondor needs memory in MB 
        mem_mbytes = mem_bytes / 1024 / 1024
        mem_per_cpu = mem_mbytes / num_cpus

        if self.cores is not None:
            self.memory = mem_per_cpu * self.cores
        elif self.slots is not None or self.partitionable is not None:
            self.memory = mem_mbytes
        else:
            self.memory = mem_per_cpu

    #
    # Utilities
    #

    def interrupt_handler(self, signal, frame):
        """
        Simply catches signals and runs the cleanup script
        """
        self.log.info("Caught signal, running cleanup")
        self.cleanup()
        sys.exit(1)

    def runcommand(self, cmd):
        """
        Helpful little function to run external *nix commands
        """
        self.log.debug("cmd = %s" % cmd)
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        (out, err) = p.communicate()
        out = out.rstrip()
        if p.returncode == 0:
            self.log.debug("External command output: %s" % out)
        else:
            self.log.error("External command failed: %s" % err)
            self.cleanup()
        return out

    def realize_file(self, src_file, dest_dir):
        """
        This function takes a UNIX path or HTTP path and returns a real file
        path.

        If the file is an HTTP file, then it downloads it to the cwd and 
        returns that path
        """
        
        d = dest_dir + "/" + os.path.basename(src_file)

        if src_file.startswith('http'):
            try:
                # This is a bit tricky, but we exploit the fact that basename()
                # is simply a string splitter. Could be fixed up to be nicer
                urllib.urlretrieve(src_file, d)
                return d
            except:
                self.log.error("Cannot retrieve file %s", src_file)
        else:
            shutil.copyfile(os.path.realpath(src_file), d)
            return d
             

if __name__ == '__main__':

    usage = "./vc3-glidein"
    parser = OptionParser(usage, version="%prog " + __version__ )
    
    parser.set_defaults(
            workdir=None,
            condor_version="8.6.0",
            condor_urlbase="http://download.virtualclusters.org",
            collector="condor.virtualclusters.org:9618",
            ccb=None,
            linger=60 * 60 * 2,  # two hours, in seconds
            auth="password",
            passwordfile=None,
            noclean=False,
            exec_wrapper=None,
            vc3_env=None,
            extra_config=None,
            loglevel=20)
             
    
    ggroup = OptionGroup(parser, "Glidein options",
        "Control the HTCondor source and configuration")

    ggroup.add_option("-w", "--workdir", action="store", type="string",
         dest="workdir", help="Path to the working directory for the glidein")

    ggroup.add_option("-V", "--condor-version", action="store", type="string",
         dest="condor_version", help="HTCondor version")

    ggroup.add_option("-r", "--repo", action="store", type="string",
         dest="condor_urlbase", help="URL containing the HTCondor tarball")

    ggroup.add_option("-c", "--collector", action="store", type="string",
         dest="collector", 
         help="collector string e.g., condor.virtualclusters.org:9618")

    ggroup.add_option("-C", "--ccb", action="store", type="string",
         dest="ccb", 
         help="ccb string e.g., condor.virtualclusters.org:9618")

    ggroup.add_option("-x", "--lingertime", action="store", type="int",
         dest="linger", help="idletime in seconds before self-shutdown")

    ggroup.add_option("-a", "--auth", action="store", type="string",
         dest="auth", help="Authentication type (e.g., password, GSI)")

    ggroup.add_option("-p", "--password", action="store", type="string",
         dest="passwordfile", help="HTCondor pool password file")

    ggroup.add_option("-e", "--extra-config", action="store", type="string",
         dest="extra_config", help="Additional configuration")

    ggroup.add_option("-W", "--wrapper", action="store", type="string",
         dest="wrapper", help="Path to user job wrapper file")

    ggroup.add_option("-E", "--vc3-env", action="store", type="string",
         dest="vc3_env", help="Name of environment varible that points to a file with the VC3 environment")

    ggroup.add_option("-P", "--periodic", action="store", type="string",
         dest="periodic", help="Path to user periodic classad hook script")

    ggroup.add_option("-t", "--partitionable", action="store_true", 
         dest="partitionable", help="Enables partitionable slots")

    ggroup.add_option("-s", "--slots", action="store", type="int",
         dest="slots", help="Enable fixed number of slots")

    ggroup.add_option("-D", "--cores", action="store", type="int",
         dest="cores", help="Total number of cores to be used by the glidein.")

    ggroup.add_option("-m", "--memory", action="store", type="int", 
         dest="memory", help="Total memory (MiB) in glidein.")

    ggroup.add_option("-F", "--disk", action="store", type="int", 
         dest="disk", help="Total disk (KiB) in glidein.")

    ggroup.add_option("-i", "--id", action="store", type="string", 
         dest="glidein_id", help="Unique Glidein ID")

    parser.add_option_group(ggroup)

    # Since we're using constants anyway, just use the logging levels numeric
    # values as provided by logger
    # 
    # DEBUG=10
    # INFO=20
    # NOTSET=0

    vgroup = OptionGroup(parser,"Logging options", 
        "Control the verbosity of the glidein")

    vgroup.add_option("-v", "--verbose", action="store_const", const=20, dest="loglevel",
        help="Sets logger to INFO level (default)")
    vgroup.add_option("-d", "--debug", action="store_const", const=10, dest="loglevel",
        help="Sets logger to DEBUG level")

    parser.add_option_group(vgroup)

    mgroup = OptionGroup(parser, "Misc options",
        "Debugging and other options")
    
    mgroup.add_option("-n", "--no-cleanup", action="store_true", 
        dest="noclean", help="Do not clean up glidein files after exit")
    

    parser.add_option_group(mgroup)

    (options, args) = parser.parse_args()

    gi = CondorGlidein(
        condor_version=options.condor_version,
        condor_urlbase=options.condor_urlbase,
        collector=options.collector,
        ccb=options.ccb,
        lingertime=options.linger,
        noclean=options.noclean,
        workdir=options.workdir,
        loglevel=options.loglevel,
        exec_wrapper=options.wrapper,
        vc3_env=options.vc3_env,
        startd_cron=options.periodic,
        auth=options.auth,
        passwordfile=options.passwordfile,
        extra_config=options.extra_config,
        partitionable=options.partitionable,
        slots=options.slots,
        cores=options.cores,
        memory=options.memory,
        disk=options.disk,
        glidein_id=options.glidein_id
    )
    
